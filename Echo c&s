Sure, I can help you with that. An echo client and server program using TCP sockets can be a great way to understand basic socket programming. Here's how you can implement these applications in Python.

### Echo Server

The echo server listens for incoming connections, receives data from clients, and sends the same data back.

```python
import socket

def start_echo_server(host='0.0.0.0', port=12345):
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((host, port))
    server_socket.listen(5)
    print(f"Echo server listening on {host}:{port}")

    while True:
        client_socket, addr = server_socket.accept()
        print(f"Accepted connection from {addr}")
        handle_client(client_socket)

def handle_client(client_socket):
    try:
        while True:
            data = client_socket.recv(1024)
            if not data:
                break
            print(f"Received data: {data.decode('utf-8')}")
            client_socket.send(data)
    except Exception as e:
        print(f"Error: {e}")
    finally:
        client_socket.close()

if __name__ == "__main__":
    start_echo_server()
```

### Echo Client

The echo client connects to the echo server, sends data, and prints the response.

```python
import socket

def start_echo_client(server_host='127.0.0.1', server_port=12345):
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((server_host, server_port))

    try:
        while True:
            message = input("Enter message to send (or 'exit' to quit): ")
            if message.lower() == 'exit':
                break
            client_socket.send(message.encode('utf-8'))
            response = client_socket.recv(1024)
            print(f"Received response: {response.decode('utf-8')}")
    except Exception as e:
        print(f"Error: {e}")
    finally:
        client_socket.close()

if __name__ == "__main__":
    start_echo_client()
```

### Explanation

#### Echo Server
1. **Socket Setup**: Creates a TCP socket, binds it to the specified host and port, and starts listening for incoming connections.
2. **Connection Handling**: Accepts incoming connections and handles them in `handle_client`. It receives data from the client, prints it, and sends it back.
3. **Client Handling**: Continues to receive and echo data until the connection is closed.

#### Echo Client
1. **Socket Setup**: Creates a TCP socket and connects to the server.
2. **Data Transmission**: Continuously prompts the user to enter a message, sends it to the server, and prints the server's response.
3. **Termination**: The loop exits when the user types 'exit', closing the connection.

### Running the Programs
1. **Start the Server**: Run the server script first to start listening for connections.
2. **Run the Client**: Run the client script. It will connect to the server and allow you to send messages.

This basic setup demonstrates how to create a simple echo server and client using TCP sockets in Python.