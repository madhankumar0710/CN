Sure, here's a simple example of how you can create a Reverse ARP (RARP) protocol simulation using TCP sockets in Python. The RARP protocol is used to map a MAC address to an IP address. I'll provide separate client and server code.

### Server Code
```python
import socket

# Define server address and port
SERVER_IP = '127.0.0.1'
SERVER_PORT = 65432

# Sample MAC to IP mapping
mac_to_ip = {
    '00:0a:95:9d:68:16': '192.168.1.2',
    '00:0b:44:11:3a:b7': '192.168.1.1'
}

def handle_client(client_socket):
    mac_address = client_socket.recv(1024).decode()
    print(f"Received MAC address: {mac_address}")

    ip_address = mac_to_ip.get(mac_address, "MAC address not found")
    client_socket.send(ip_address.encode())
    client_socket.close()

def main():
    server_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server_socket.bind((SERVER_IP, SERVER_PORT))
    server_socket.listen(5)
    print("Server listening on {}:{}".format(SERVER_IP, SERVER_PORT))

    while True:
        client_socket, addr = server_socket.accept()
        print(f"Accepted connection from {addr}")
        handle_client(client_socket)

if __name__ == "__main__":
    main()
```

### Client Code
```python
import socket

# Define server address and port
SERVER_IP = '127.0.0.1'
SERVER_PORT = 65432

def main():
    client_socket = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client_socket.connect((SERVER_IP, SERVER_PORT))

    mac_address = '00:0a:95:9d:68:16'  # Example MAC address to query
    client_socket.send(mac_address.encode())

    ip_address = client_socket.recv(1024).decode()
    print(f"Received IP address: {ip_address}")

    client_socket.close()

if __name__ == "__main__":
    main()
```

### Explanation
- **Server Code**:
  - Creates a TCP socket and binds it to a specified IP address and port.
  - Listens for incoming connections.
  - For each client connection, it receives a MAC address, looks it up in the `mac_to_ip` dictionary, and sends the corresponding IP address back to the client.

- **Client Code**:
  - Creates a TCP socket and connects to the server.
  - Sends a predefined MAC address to the server.
  - Receives and prints the IP address sent by the server.

### Running the Code
1. Save the server code to a file named `rarp_server.py`.
2. Save the client code to a file named `rarp_client.py`.
3. Run the server code first: `python rarp_server.py`.
4. Run the client code: `python rarp_client.py`.

This will simulate a simple RARP protocol where the client queries the server for the IP address corresponding to a given MAC address.