To simulate the Reverse Address Resolution Protocol (RARP) using TCP sockets in Python, you need to create both a client and a server. The server will respond to RARP requests with the corresponding IP address for a given MAC address.

Hereâ€™s how you can set up a simple RARP simulation using TCP sockets:

### Server Code

```python
import socket

# RARP table mapping MAC addresses to IP addresses
rarp_table = {
    "00:0a:95:9d:68:16": "192.168.1.2",
    "00:0b:44:11:3a:b7": "192.168.1.3"
}

def handle_client(client_socket):
    try:
        # Receive MAC address from client
        mac_address = client_socket.recv(1024).decode('utf-8')
        print(f"Received RARP request for MAC: {mac_address}")

        # Look up IP address in the RARP table
        ip_address = rarp_table.get(mac_address, "Not Found")
        
        # Send IP address back to client
        client_socket.send(ip_address.encode('utf-8'))
    except Exception as e:
        print(f"Error handling client: {e}")
    finally:
        client_socket.close()

def main():
    server = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    server.bind(("0.0.0.0", 9999))
    server.listen(5)
    print("RARP server listening on port 9999")

    while True:
        client_socket, addr = server.accept()
        print(f"Accepted connection from {addr}")
        handle_client(client_socket)

if __name__ == "__main__":
    main()
```

### Client Code

```python
import socket

def main():
    # Server IP address and port
    server_ip = "127.0.0.1"
    server_port = 9999

    client = socket.socket(socket.AF_INET, socket.SOCK_STREAM)
    client.connect((server_ip, server_port))

    # MAC address to look up
    mac_address = "00:0a:95:9d:68:16"

    try:
        # Send MAC address to server
        client.send(mac_address.encode('utf-8'))

        # Receive IP address from server
        ip_address = client.recv(1024).decode('utf-8')
        print(f"Received IP address for MAC {mac_address}: {ip_address}")
    except Exception as e:
        print(f"Error communicating with server: {e}")
    finally:
        client.close()

if __name__ == "__main__":
    main()
```

### Explanation

#### Server Code:
1. **RARP Table**: A dictionary mapping MAC addresses to IP addresses.
2. **handle_client Function**: Receives a MAC address from the client, looks up the corresponding IP address in the RARP table, and sends it back to the client.
3. **Main Function**: Sets up the server socket to listen for incoming connections on port 9999. For each accepted connection, it calls `handle_client` to process the request.

#### Client Code:
1. **Main Function**: Sets up the client socket to connect to the server on `127.0.0.1:9999`. Sends a MAC address to the server and receives the corresponding IP address.

### Running the Code
1. **Run the Server**: Start the server script first. It will listen for incoming connections.
2. **Run the Client**: Start the client script. It will send a MAC address to the server and print the received IP address.

This setup simulates a simple RARP protocol using TCP sockets in Python. You can extend the RARP table with more MAC-IP mappings as needed.